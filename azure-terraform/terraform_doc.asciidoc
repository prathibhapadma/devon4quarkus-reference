
== Provision an Aks Cluster with Terraform

:url-az-account: https://portal.azure.com/#home

:url-az-CLI:  https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest

:url-az-kubectl: https://docs.microsoft.com/en-us/azure/aks/tutorial-kubernetes-deploy-cluster?tabs=azure-cli

:url-helm:  https://helm.sh/docs/intro/install/

:url-terraform: https://learn.hashicorp.com/tutorials/terraform/install-cli

:url-repo-code:  https://github.com/devonfw-sample/devon4quarkus-reference/azure-terraform

:url-script-linux: https://github.com/devonfw-sample/devon4quarkus-reference/azure-terraform/installation_setup_linux.sh

:url-script-windows: https://github.com/devonfw-sample/devon4quarkus-reference/azure-terraform/installation_setup_windows.ps1

The Azure Kubernetes Service (AKS) is a fully managed Kubernetes service for deploying, managing and scaling containerized applications on Azure.

== *Prerequisites:*

. Sign up into {url-az-account}[Azure Account].
. Install the Azure {url-az-CLI}[CLI].
. Install the {url-az-kubectl}[kubectl].
. Install the {url-helm}[Helm].
. Install the {url-terraform}[Terraform].

== *Install the Prerequisites using Script*
Install all Prerequisites using an Automated script for Windows and Linux, as shown below.

* The script located for Linux `devon4quarkus-reference/azure-terraform/installation_setup_linux.sh` and windows `devon4quarkus-reference/azure-terraform/installation_setup_windows.ps1`.

== *Login to Azure Account*

Before the terraform implementation we need to login Azure account through `Azure CLI`.
```
az login
az account set --subscription $SUBSCRIPTION
```

== *Set-Up And Initialize Terraform Workspace*

In your terminal, clone the following {url-repo-code}[repository] code.

`$ git clone https://github.com/devonfw-sample/devon4quarkus-reference`

You can explore this repository by changing the directories.

`cd azure-terraform/terraform-aks-setup`

List of the files used to provision the AKS Cluster.

. `aks-cluster.tf` provisions a Resource Group and AKS Cluster. The default node pool defines the number of VMs and the VM type cluster uses.

. `variables.tf` declares the variables to terraform, It can use reference to its configuration.

. `terraform.tfvars` defines the variables values to terraform.

. `outputs.tf` declares values that can be useful to interact with your Aks Cluster.

. `versions.tf` set the Terraform version and defines the required provider block.

== *Initialize Terraform*
After you have saved your customized variables file, Initialize your Terraform workspace, which will download the provider and initialize it with the values provided in your terraform.tfvars file.

`$ terraform init`

== *Terraform plan*
Terraform plan creates an execution of plan and evaluates a Terraform configuration to determine the desired state of all the resources it declares.

`$terraform plan`

== *Terraform apply*
Terraform apply will review the planned actions, your terminal output should indicate the plan is running and what resources will be created.

`$ terraform apply`

You can see this terraform apply will provision an Azure Resource Group and Aks Cluster. Confirm the apply with a yes.

== *Deploy Helm-charts with the Helm Provider*

The Terraform Helm provider allows you to deploy and manage your Kubernetes applications dynamically and securely. Create the Helm Provider in `helm_release.tf` and configure the helm-charts repository location.

Change the directory in to `Helm Release Provider`.

`cd azure-terraform/terraform-helm-deploy`

Here we need to follow same steps as above process to deploy helm charts in to AKS cluster (Example: terraform init and terraform apply).

*Note*: According to your working directory, you need to change `terraform-remote-state` path and `Helm Charts` path in `terraform-helm-deploy/helm_release.tf` file.

== *Creating Terraform Plan using provided script*

Terraform initialize and apply automated way using the provided script, the script located in `/devon4quarkus-reference/azure-terraform/script_execute.sh`

== *Configure kubectl*

Now that you've provisioned your AKS Cluster, you need to configure kubectl.

Run the following command to retrieve the access credentials for your cluster and automatically configure kubectl.

`az aks get-credentials --resource-group $(terraform output -raw resource_group_name) --name $(terraform output -raw kubernetes_cluster_name)`

The Resource Group name and Kubernetes cluster name correspond to the output variables showed after the successful Terraform run.

== *Access Kubernetes Dashboard*
Run the following command to generate the Azure portal link.

`az aks browse --resource-group $(terraform output -raw resource_group_name) --name $(terraform output -raw kubernetes_cluster_name)`

Go to the URL in your preferred browser to view the Kubernetes resource view.

== *Clean up your workspace*
Run the destroy command and confirm with yes in your terminal.

`$ terraform destroy`

```
Note: terraform destroy can clean your Aks Cluster but not Resource Group, Because we are not authorized to perform RG deletion. For that we need to raise ticket for IT Group.
```
