name: quarkus-project-deploy

on:
  workflow_run:
    workflows: 'packageWorkflow'
    types: completed
    branches:
      - release/*
      - develop
  workflow_dispatch:
    inputs:
      k8sProvider:
        description: 'Deploy Cluster Name.'
        required: true
        type: string  
        default: 'AKS'
      secretsName:
        description: 'ImagePullSecret Name.'
        type: string
        default: ''
        
env:
  deploymentYamlPath: "${{ github.workspace }}/k8s/application-deployment.yaml" 
  ingressYamlPath: "${{ github.workspace }}/k8s/ingress.yaml"  
  deployFilesPath: "${{ github.workspace }}/k8s"
  k8sNamespace: "test1" 
  provisionPipeline: "aks-provisioning.yml"
  packageWorkflow: "package-pipeline.yml"

jobs:
  Deploy_to_AKS:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.k8sProvider == 'AKS' }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: get tagename
        run: |
          branch="${{ github.event.workflow_run.head_branch || github.ref }}"
          
          # (File was renamed from '${language}-package.sh' to package-extra.sh in ./package-pipeline.cfg)
          ..github/workflows/scripts/package-extra.sh

          # we get what is located after the last '/' in the branch name, so it removes /ref/head or /ref/head/<folder> if your branche is named correctly"
          branch_short=$(echo "$branch" | awk -F '/' '{ print $NF }')

          # We change the name of the tag depending if it is a release or another branch
          echo "$branch" | grep release && tag_completed="${tag}"
          echo "$branch" | grep release || tag_completed="${tag}_${branch_short}"
          
          echo "branch :$branch"
          echo "tag: ${tag}"
          echo "branch_name: ${tag}_${branch_short}"
          echo "final_tag: $tag_completed"
          
          docker images
          docker ps -a
          docker image pull ultimatom/package_github_docker:$tag_completed
          docker ps -a
          docker images
          
#       - name: Download artifact from AKS provision pipeline workflow
#         uses: dawidd6/action-download-artifact@v2
#         continue-on-error: true
#         with:
#           workflow: ${{ env.provisionPipeline }}
#           check_artifacts:  true
#           search_artifacts: true
#           name: kubeconfig 
          
#       - name: Set EKS Environment Variables
#         uses: tw3lveparsecs/github-actions-setvars@v0.1
#         with:
#           envFilePath: ".github/vars/*"
          
#       - name: cat secrets
#         run: |
#           echo "DOCKER_USER ${{ secrets.DOCKER_USER }}"
#           echo "DOCKER_PASSWORD ${{ secrets.DOCKER_PASSWORD }}"
          
#       - name: Create secrets for AKS
#         if: ${{ github.event.inputs.k8sProvider == 'AKS' && github.event.inputs.secretsName != '' }}
#         env:
#           KUBECONFIG: "${{ github.workspace }}/kubeconfig"
#         run: .github/workflows/scripts/secrets.sh "${{ env.k8sNamespace }}" "${{ github.event.inputs.secretsName }}" "${{ secrets.DOCKER_USER }}" "${{ secrets.DOCKER_PASSWORD }}" "${{ env.registry }}" "${{ env.deploymentYamlPath }}" 
     
#       - name: Deploy app to AKS  
#         env:
#           KUBECONFIG: "${{ github.workspace }}/kubeconfig"
#         run: .github/workflows/scripts/deploy.sh "${{ env.k8sNamespace }}" "${{ env.imageName }}" "${{ env.tag }}" "${{ env.dns_name }}" "${{ env.deploymentYamlPath }}" "${{ env.ingressYamlPath }}" "${{ env.deployFilesPath }}" 
        
#       - name: list pods
#         env:
#           KUBECONFIG: "${{ github.workspace }}/kubeconfig"
#         run: |
#           kubectl get all -n "${{ env.k8sNamespace }}"
#           kubectl get svc -n nginx-ingress
          
#   Deploy_to_EKS:
#     runs-on: ubuntu-latest
#     if: ${{ github.event.inputs.k8sProvider == 'EKS' }} 
#     steps:
#       - name: Checkout the repository
#         uses: actions/checkout@v3 
        
#       - name: Set EKS Environment Variables
#         uses: tw3lveparsecs/github-actions-setvars@v0.1
#         with:
#           envFilePath: ".github/vars/*"

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.aws_region }}
      
#       - name: Create secrets for EKS
#         if: ${{ github.event.inputs.k8sProvider == 'EKS' && github.event.inputs.secretsName != '' }}
#         run: |
#           aws eks update-kubeconfig --name ${{ env.cluster_name }} --region ${{ env.aws_region }}
#           .github/workflows/scripts/secrets.sh "${{ env.k8sNamespace }}" "${{ github.event.inputs.secretsName }}" "${{ secrets.AWS_ACCESS_KEY_ID }}" "${{ secrets.AWS_SECRET_ACCESS_KEY }}" "${{ env.registry }}" "${{ env.deploymentYamlPath }}"

#       - name: Deploy app to EKS 
#         run: |
#           aws eks update-kubeconfig --name ${{ env.cluster_name }} --region ${{ env.aws_region }}
#           .github/workflows/scripts/deploy.sh "${{ env.k8sNamespace }}" "${{ env.imageName }}" "${{ env.tag }}" "${{ env.dns_name }}" "${{ env.deploymentYamlPath }}" "${{ env.ingressYamlPath }}" "${{ env.deployFilesPath }}"  
      
#       - name: list pods
#         env:
#           KUBECONFIG: "${{ github.workspace }}/kubeconfig"
#         run: |
#           kubectl get all -n "${{ env.k8sNamespace }}"
#           kubectl get svc -n nginx-ingress
          
